<title>A brief description of the Calculon language</title>

<h3>Introduction</h3>

The Calculon language is extremely simple. There are three types, <code>real</code>,
<code>vector</code> and <code>boolean</code>. Everything is explicitly typed
(except that if you omit a type specifier, you get <code>real</code>.
Everything is an expression, including entire scripts. Variables are immutable
and looping must be done via recursion.

The following list describes the major syntactic elements:

  *  <code>0</code> is a real constant.
  *  <code>true</code> or <code>false</code> are boolean constants.
  *  <code>&#91;0, 1, 2]</code> is a vector. The elements must be reals (but
     need not be constant).
  *  <code>sqrt(2)</code> calls a function. Functions may take any number of
     parameters, of any type, and return a single parameter, of any type.
     Functions are not polymorphic.
  *  <code>V.x, V.y, V.z</code> extract individual elements from a vector.
  *  <code>V.length2, V.length</code> compute the square of the length and
     the length of the vector (in, hopefully, an efficient manner).
     <code>V.length == sqrt(V.length2)</code>, of course.
  *  <code>let i = 1; ...expr...</code> defines a variable that becomes
     available when evaluating <code>expr</code>. The new variable is does
     not have an explicit type and is therefore considered to be a real (no
     type inference is done).
  *  <code>let v: vector = &#91;0, 1, 2]; ...expr...</code> defines a variable
     that becomes available when evaluating <code>expr</code>. The new
     variable is explicitly typed.
  *  <code>let f(v1:vector, v2:vector):vector = v1 + v2; ...expr...</code>
     defines a function. The new function is available both when evaluating
     <code>expr</code> <b>and</b> inside the function body, which allows
     recursion. Note that the scoping rules here are different to when you
     define a variable!
  *  <code>if booleanvalue then truevalue else falsevalue</code> does 
     conditional evaluation. If <code>booleanvalue</code> is <code>true</code>
     then <code>truevalue</code> is evaluated; otherwise
     <code>falsevalue</code> is evaluated. Both must have the same type.

In addition the usual set of infix and prefix operators are available:

  *  For <b>booleans</b>: <code>==</code>, <code>!=</code>,
     <code>and</code>, <code>or</code>, <code>not</code>. <code>and</code>
     and <code>or</code> are short-circuiting.
  *  For <b>vectors</b>: <code>==</code, <code>!=</code>, <code>+</code>,
     <code>-</code>, <code>*</code>, <code>/</code>. <code>*</code> and
     <code>/</code> take a real as their second parameter.
  *  For <b>reals</b>: all the usual C-like operators. Complain if you find 
     any missing. Also <code>^</code> is available to raise one number to the
     power of another.

The order of precedence, from highest to lowest, is: unary operators,
multiplication and division, addition and subtraction, comparisons, boolean
operators, <code>if</code>...<code>then</code>...<code>else</code>,
<code>let</code>.

Most of the standard maths library is bound. They all behave exactly like
their Posix namesakes. As of writing, the list consists of:

  *  <code>acos()</code>
  *  <code>acosh()</code>
  *  <code>asin()</code>
  *  <code>asinh()</code>
  *  <code>atan()</code>
  *  <code>atan2()</code>
  *  <code>atanh()</code>
  *  <code>cbrt()</code>
  *  <code>ceil()</code>
  *  <code>copysign()</code>
  *  <code>cos()</code>
  *  <code>cosh()</code>
  *  <code>erf()</code>
  *  <code>erfc()</code>
  *  <code>exp()</code>
  *  <code>exp2()</code>
  *  <code>expm1()</code>
  *  <code>fabs()</code>
  *  <code>fdim()</code>
  *  <code>floor()</code>
  *  <code>fma()</code>
  *  <code>fmax()</code>
  *  <code>fmin()</code>
  *  <code>fmod()</code>
  *  <code>hypot()</code>
  *  <code>j0()</code>
  *  <code>j1()</code>
  *  <code>lgamma()</code>
  *  <code>log()</code>
  *  <code>log10()</code>
  *  <code>log1p()</code>
  *  <code>log2()</code>
  *  <code>logb()</code>
  *  <code>nearbyint()</code>
  *  <code>pow()</code>
  *  <code>remainder()</code>
  *  <code>rint()</code>
  *  <code>round()</code>
  *  <code>sin()</code>
  *  <code>sinh()</code>
  *  <code>sqrt()</code>
  *  <code>tan()</code>
  *  <code>tgamma()</code>
  *  <code>trunc()</code>
  *  <code>y0()</code>
  *  <code>y1()</code>
