<title>Using the Calculon library</title>

<h3>Introduction</h3>

The Calculon library is extremely simple. It is supplied as a set of
headers; to use the library, create a type instance of the compiler, create
the global symbol table, and then you can instantiate functions. If compiling
a script fails, an exception is thrown. If that succeeds, you have an object
which you can just call.

Here is an annotated example.

<verbatim>
/* Create the type instance, and pull some useful types out of it */
typedef Calculon::Instance<Calculon::RealIsDouble> Compiler;
typedef Compiler::Real Real;
typedef Compiler::Vector Vector;

/* Create the symbol table */
Compiler::StandardSymbolTable symbols;
 
/* Open the script file */
std::ifstream scriptSource("script.cal");

/* Prototype the function that the script represents, and compile the
 * script. We pass in the Calculon type signature of the function so the
 * compiler knows what parameters we're using */
typedef Real ScriptFunction(Real x, Real y);
Compiler::Program<ScriptFunction> function(symbols, code,
    "(x:real, y:real): real");
     
/* Call the function */

Real result = function(1, -1);
</verbatim>

...and that's pretty much it. <code>function()</code> may be called as
many times as you like and is thread-safe. When it goes out of scope it will
be destroyed.

<h3>Configurations</h3>

Right now there are two forms of the Calculon compiler you can use. This:

<verbatim>
typedef Calculon::Instance<Calculon::RealIsDouble> Compiler;
</verbatim>

...and this:

<verbatim>
typedef Calculon::Instance<Calculon::RealIsFloat> Compiler;
</verbatim>

These control whether Calculon's <code>real</code> type is a
single-precision or double-precision. There may be more configurations in
the future.

You can use both at the same time, if you wish.

<h3>Calling conventions</h3>

Alas, the mapping between C++ parameters and Calculon parameters is not
quite obvious.

Calculon reals are available as <code>Compiler::Real</code>, and Calculon
vectors as <code>Compiler::Vector</code>. Reals are passed in the obvious
way, as in the example above. However, vectors are passed by pointer. If the
Calculon script returns a vector, then an extra initial parameter is added
which points to where the return parameter should be written.

For example:

<verbatim>
/* f1(x: real, y: real, v: vector): real */
typedef Real f1(Real x, Real y, Vector* v);

/* f2(x: real, y: real, v: vector): vector */
typedef void f2(Vector* result, Real x, Real y, Vector* v);
</verbatim>

To call such a function, create some Vector objects somewhere and pass
their pointers in. The stack will do fine.

<verbatim>
Vector result;
Vector v = {0, 1, 2};
f2(&result, 7, 8, &v);
</verbatim>

<h3>Registering functions</h3>

Functions may be trivially added to the symbol table. (You may create as
many symbol tables as you wish; the symbol table is only ever used during the
compilation process. Symbol tables are not thread safe!)

<verbatim>
extern "C"
double perlin(Vector* v)
{
	return ...
}

Compiler::StandardSymbolTable symbols;
symbols.add("perlin", "D=V", perlin);
</verbatim>

The first parameter specifies the name; the second parameter describes the
function; the third parameter is the function to call.

The first character of the parameter description describes the return type,
and the characters after the equals sign describes the parameters. The
characters have the following meaning:

<dl>
<dt><code>V</code></dt>
<dd>a vector</dd>
<dt><code>F</code></dt>
<dd>a single-precision float (if Calculon is configured to use
double-precision floats, the value will be converted automatically)</dd>
<dt><code>D</code></dt>
<dd>a double-precision float (if Calculon is configured to use
single-precision floats, the value will be converted automatically)</dd>
<dt><code>R</code></dt>
<dd>a real (no conversion is done; the function must use
<code>Compiler::Real</code> as the type of this parameter)</dd>
</dl>

Vectors are passed in and out in the same way as for Calculon scripts.

Note carefully! Calculon is designed for scripts that have <b>no side
effects</b>. If you call out to a function which does something... well, it'll
work, but the Calculon compiler is allowed to assume that if it calls the
function once with a set of parameters, it can call it again with the same
parameters and get the same result. Be careful. (And don't forget that
<code>rand()</code> has side effects.)

<h3>Dependencies</h3>

The Calculon library uses the STL and iostreams. It does not use Boost or
C++11, for maximum compatibility. Fairly obviously, it uses LLVM 3.2. It may
or may not work with other versions of LLVM. (If you need it to work on another
version, please <a href="mailto:dg@cowlark.com">get in touch</a>.)

The supplied <a href="../Makefile">sample Makefile</a> shows the recommended
way to build programs that use Calculon, but the short summary is:

<verbatim>
g++ -I$(shell llvm-config-3.2 --includedir) -lLLVM-3.2 program.cc
</verbatim>

Calculon works with both gcc and clang++. I haven't tried with Visual
Studio (I'd appreciate any reports of workingness or otherwise).
